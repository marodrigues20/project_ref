ext {

    versions = [
            springBoot         : '2.1.9.RELEASE',
            springCloud        : '2.1.2.RELEASE',
            springKafka        : '2.2.7.RELEASE',
            apacheKafka        : '2.3.0',
            undertowServlet    : '2.0.26.Final',
            kafkaAvroSerializer: '4.0.0',
            avro               : '1.9.0',
            springFox          : '2.9.2',
            swaggerAnnotations : '1.5.22',
            mapstruct          : '1.3.0.Final',
            lombok             : '1.18.8',
            logstashLogback    : '6.1',
            micrometer         : '1.2.0',
            cain001Enum        : '0.1.13',
            cain003Enum        : '0.2.9',
            transactionMessage : '0.2.82',
            liquibase          : '3.7.0',
            postgresql         : '42.2.6',
            hibernateTypes     : '2.5.0',
            feeChargesEnum     : "0.3.1",

            //test libs
            junit              : '4.12',
            junit5             : '5.2.0',
            mockito            : '2.24.0',
            assertJ            : '3.9.0',
            awaitility         : '3.1.6',
            embeddedRedis      : '0.7.2',
            embeddedCockroach  : '0.1.0'
    ]

    libs = [
            springBootStarter       : "org.springframework.boot:spring-boot-starter:$versions.springBoot",
            springBootWeb           : "org.springframework.boot:spring-boot-starter-web:$versions.springBoot",
            springBootJpa           : "org.springframework.boot:spring-boot-starter-data-jpa:$versions.springBoot",
            springBootRedis         : "org.springframework.boot:spring-boot-starter-data-redis:$versions.springBoot",
            springBootUndertow      : "org.springframework.boot:spring-boot-starter-undertow:$versions.springBoot",
            springBootActuator      : "org.springframework.boot:spring-boot-starter-actuator:$versions.springBoot",
            springCloudFeign        : "org.springframework.cloud:spring-cloud-starter-openfeign:$versions.springCloud",
            springCloudSleuth       : "org.springframework.cloud:spring-cloud-starter-sleuth:$versions.springCloud",
            springKafka             : "org.springframework.kafka:spring-kafka:$versions.springKafka",
            undertowServlet         : "io.undertow:undertow-servlet:$versions.undertowServlet",
            kafkaClients            : "org.apache.kafka:kafka-clients:$versions.apacheKafka",
            apacheKafka             : "org.apache.kafka:kafka_2.12:$versions.apacheKafka",
            kafkaAvroSerializer     : "io.confluent:kafka-avro-serializer:$versions.kafkaAvroSerializer",
            avro                    : "org.apache.avro:avro:$versions.avro",
            springfoxSwagger2       : "io.springfox:springfox-swagger2:$versions.springFox",
            springfoxSwaggerUi      : "io.springfox:springfox-swagger-ui:$versions.springFox",
            swaggerAnnotations      : "io.swagger:swagger-annotations:$versions.swaggerAnnotations",
            mapstructProcessor      : "org.mapstruct:mapstruct-processor:$versions.mapstruct",
            mapstruct               : "org.mapstruct:mapstruct-jdk8:$versions.mapstruct",
            lombok                  : "org.projectlombok:lombok:$versions.lombok",
            logstashLogback         : "net.logstash.logback:logstash-logback-encoder:$versions.logstashLogback",
            micrometerCore          : "io.micrometer:micrometer-core:$versions.micrometer",
            micrometerPrometheus    : "io.micrometer:micrometer-registry-prometheus:$versions.micrometer",
            cain001Enum             : "com.tenx.digital-universal-banking.enums:cain001-enum:$versions.cain001Enum",
            cain003Enum             : "com.tenx.digital-universal-banking.enums:cain003-enum:$versions.cain003Enum",
            transactionMessage      : "com.tenx.digital-universal-banking:transaction-message:$versions.transactionMessage",
            liquibase               : "org.liquibase:liquibase-core:$versions.liquibase",
            postgresql              : "org.postgresql:postgresql:$versions.postgresql",
            hibernateTypes          : "com.vladmihalcea:hibernate-types-52:$versions.hibernateTypes",
            feeChargesEnum          : "com.tenx.digital-universal-banking.enums:feesCharges-enum:$versions.feeChargesEnum",
            jacksonDatabind         : "com.fasterxml.jackson.core:jackson-databind:2.9.9.3",

            //test libs
            junit                   : "junit:junit:$versions.junit",
            junitJupiterApi         : "org.junit.jupiter:junit-jupiter-api:$versions.junit5",
            junitJupiterEngine      : "org.junit.jupiter:junit-jupiter-engine:$versions.junit5",
            junitJupiterParams      : "org.junit.jupiter:junit-jupiter-params:$versions.junit5",
            junitVintageEngine      : "org.junit.vintage:junit-vintage-engine:$versions.junit5",
            mockito                 : "org.mockito:mockito-core:$versions.mockito",
            mockitoJunitJupiter     : "org.mockito:mockito-junit-jupiter:$versions.mockito",
            assertJ                 : "org.assertj:assertj-core:$versions.assertJ",
            awaitility              : "org.awaitility:awaitility:$versions.awaitility",
            embeddedRedis           : "it.ozimov:embedded-redis:$versions.embeddedRedis",
            sprintCloudContract     : "org.springframework.cloud:spring-cloud-contract-wiremock:$versions.springCloud",
            embeddedCockroach       : "com.tenxbanking:cockroach-runner:$versions.embeddedCockroach",

            apacheKafkaTest         : "org.apache.kafka:kafka_2.12:$versions.apacheKafka:test",
            kafkaClientsTest        : "org.apache.kafka:kafka-clients:$versions.apacheKafka:test",
            kafkaStreamsTest        : "org.apache.kafka:kafka-streams:$versions.apacheKafka:test",
            kafkaSchemaRegistry     : "io.confluent:kafka-schema-registry:$versions.kafkaAvroSerializer",
            kafkaSchemaRegistryTests: "io.confluent:kafka-schema-registry:$versions.kafkaAvroSerializer:tests",
            springBootStarterTest   : "org.springframework.boot:spring-boot-starter-test:$versions.springBoot",

            //TODO: enable these ones once the relevant tickets are done
            //springfoxBeanValidators: "io.springfox:springfox-bean-validators:$versions.springFox",

            //springBootSecurity   : "org.springframework.boot:spring-boot-starter-security:$versions.springBoot",
            //zipkinReporterXrayUdp: "io.zipkin.aws:zipkin-reporter-xray-udp:$versions.zipkinReporterXrayUdp",
    ]
}
